<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects | Paulo Borba</title>
    <link>https://pauloborba.github.io/project/</link>
      <atom:link href="https://pauloborba.github.io/project/index.xml" rel="self" type="application/rss+xml" />
    <description>Projects</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2019</copyright><lastBuildDate>Sat, 09 Nov 2019 17:52:13 -0300</lastBuildDate>
    <image>
      <url>https://pauloborba.github.io/img/foto2019.jpg</url>
      <title>Projects</title>
      <link>https://pauloborba.github.io/project/</link>
    </image>
    
    <item>
      <title>Semantic Merge Tools</title>
      <link>https://pauloborba.github.io/project/semantic-merge/</link>
      <pubDate>Sat, 09 Nov 2019 17:52:13 -0300</pubDate>
      <guid>https://pauloborba.github.io/project/semantic-merge/</guid>
      <description>

&lt;h4 id=&#34;problem&#34;&gt;Problem&lt;/h4&gt;

&lt;p&gt;Current merge tools are oblivious to the semantic of the code changes that they integrate. As a consequence, they might integrate conflicting changes without warning developers, like when two people independently change the behavior of dependent parts of the code.&lt;/p&gt;

&lt;p&gt;Such missed conflicts are hardly detected by project tests or code reviews, and end up escaping to system users, with potentially severe negative consequences. When users report such defects, developers might have a hard time to understand the underlying causes and fix the code.&lt;/p&gt;

&lt;p&gt;These problems compromise development productivity and software quality.&lt;/p&gt;

&lt;h4 id=&#34;solution&#34;&gt;Solution&lt;/h4&gt;

&lt;p&gt;To detect such conflicts at integration time, we are studying two techniques for building semantic merge tools. First, we are developing static analyses to detect interference among the changes to be integrated. Second, we are using  test generation tools for generating tests that reveal such interference.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Semistructured Merge Tools</title>
      <link>https://pauloborba.github.io/project/s3m/</link>
      <pubDate>Sat, 09 Nov 2019 17:30:09 -0300</pubDate>
      <guid>https://pauloborba.github.io/project/s3m/</guid>
      <description>

&lt;h4 id=&#34;problem&#34;&gt;Problem&lt;/h4&gt;

&lt;p&gt;Developers often waste time by manually resolving merge conflicts that could be automatically resolved, like when integrating independent import or method declarations that happened to be included by different developers in the same area of the code.&lt;/p&gt;

&lt;p&gt;Worse, current merge tools might integrate conflicting changes without warning developers, like when two people independently declare methods with the same signature in different parts of a class.&lt;/p&gt;

&lt;p&gt;These problems compromise development productivity and software quality.&lt;/p&gt;

&lt;h4 id=&#34;solution&#34;&gt;Solution&lt;/h4&gt;

&lt;p&gt;To avoid such problems, we develop &lt;a href=&#34;https://github.com/guilhermejccavalcanti/jFSTMerge&#34; target=&#34;_blank&#34;&gt;s3m&lt;/a&gt;, a semistructured merge tool that partially explores programming language syntactic structure to provide more accurate code integration without compromising execution performance.&lt;/p&gt;

&lt;h4 id=&#34;results&#34;&gt;Results&lt;/h4&gt;

&lt;h5 id=&#34;s3m-has-significant-advantages-over-unstructured-merge-tools&#34;&gt;s3m has significant advantages over unstructured merge tools&lt;/h5&gt;

&lt;p&gt;In our &lt;a href=&#34;https://pauloborba.github.io/publication/2017evaluating_and_improving_semistructured_merge/&#34; target=&#34;_blank&#34;&gt;OOPSLA 2017&lt;/a&gt; paper we show that FSTMerge, the pioneering semistructured merge tool, reports much less false positives (incorrectly reported conflicts) than unstructured merge tools that are widely used in industry.
We also find evidence that FSTMerge false positives are easier to analyze and resolve than those reported by unstructured merge.
However, we find no evidence that semistructured merge leads to fewer false negatives (conflicts correctly reported by one tool but missed by the other), and we argue that semistructured merge false negatives are harder to detect and resolve than unstructured merge false negatives.
Driven by these findings, we implement s3m, an improved semistructured merge tool for Java that further combines both merge techniques to reduce the false positives and false negatives of semistructured merge.
We find evidence that s3m, when compared to unstructured merge in our sample, reduces the number of reported conflicts by half, has no additional false positives, has at least 8% fewer false negatives, and is not prohibitively slower.&lt;/p&gt;

&lt;h5 id=&#34;s3m-benefits-do-not-generalize-to-javascript&#34;&gt;s3m benefits do not generalize to JavaScript&lt;/h5&gt;

&lt;p&gt;To understand whether semistructured merge and the just mentioned benefits generalize to other kinds of languages, in one of our &lt;a href=&#34;https://pauloborba.github.io/publication/2019semistructured_merge_in_javascript_systems/&#34; target=&#34;_blank&#34;&gt;ASE 2019&lt;/a&gt; papers we implement two semistructured merge tools for JavaScript, and compare them to a widely used unstructured tool.
We find that current semistructured merge algorithms and frameworks are not directly applicable for scripting languages like JavaScript.
By adapting the merge algorithms, we find evidence that our JavaScript tools report fewer false positives than unstructured merge, without compromising the correctness of the merging process.
The benefits, however, are much smaller than the ones observed for Java-like languages, suggesting that semistructured merge advantages might be limited for languages that allow both commutative elements (like function declarations) and non-commutative elements (like statements) at the same syntactic level.&lt;/p&gt;

&lt;h5 id=&#34;more-structure-does-not-necessarily-improve-merge-accuracy&#34;&gt;More structure does not necessarily improve merge accuracy&lt;/h5&gt;

&lt;p&gt;To better understand the impact of exploring additional language syntactic structure in software merging, in another &lt;a href=&#34;https://pauloborba.github.io/publication/2019the_impact_of_structure_on_software_merging__semistructured_versus_structured_merge/&#34; target=&#34;_blank&#34;&gt;ASE 2019&lt;/a&gt; paper we compare semistructured merge with structured merge.
In particular, we compare s3m with an structured tool we implemented and that behaves as s3m for merging declarations, but invokes JDime (an structured merge tool for Java) for merging the bodies of declarations.
Our results show that semistructured and structured merge differ less often than we expected, in only 24% of the scenarios with conflicts.
Semistructured merge reports more false positives, whereas structured merge has more false negatives.
Finally, we found that adapting a semistructured merge tool to resolve a particular kind of conflict (caused by changes to consecutive lines) makes semistructured and structured merge even closer.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
